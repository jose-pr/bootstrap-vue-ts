import Popper from "popper.js";
import { PopperOptions, Placement, Boundary, Behavior, Data } from "popper.js";
import { Dict, Directive, BvEvent, DirectiveBinding } from "../../chunks/a6dd0dc4";
export interface ToolTipConfig {
    animation: boolean;
    template: string;
    trigger: string;
    title: string;
    delay: number | {
        show: number;
        hide: number;
    };
    html: boolean;
    placement: Placement;
    offset: number;
    arrowPadding: number | string;
    container: boolean | string;
    fallbackPlacement: Behavior;
    callbacks: Dict<Function>;
    boundary: HTMLElement | Boundary;
    boundaryPadding: number;
    content: string;
}
export declare class ToolTip extends Directive<ToolTipConfig> {
    $isEnabled?: boolean;
    $hoverState?: string;
    $activeTrigger?: Dict<boolean>;
    $popper?: Popper;
    $tip?: HTMLElement;
    $id?: string;
    $routeWatcher?: () => void;
    $forceHide?: () => void;
    $doHide?: (id: string) => void;
    $doShow?: (id: string) => void;
    $doDisable?: (id: string) => void;
    $doEnable?: (id: string) => void;
    _noop?: () => void;
    init(): void;
    static readonly Default: ToolTipConfig;
    static readonly NAME: string;
    static ValidateApply(): boolean;
    static ParseBindingss<T = ToolTipConfig>(bindings: DirectiveBinding): ToolTipConfig;
    processConfig(config: ToolTipConfig): ToolTipConfig;
    preDispose(): void;
    enable(): void;
    disable(): void;
    toggle(event: BvEvent): void;
    show(): void;
    visibleCheck(on: boolean): void;
    setWhileOpenListeners(on: boolean): void;
    forceHide(): void;
    hide(callback?: null | (() => void), force?: boolean): void;
    emitEvent(evt: BvEvent): void;
    getContainer(): HTMLElement;
    addAriaDescribedby(): void;
    removeAriaDescribedby(): void;
    removePopper(): void;
    transitionOnce(tip: HTMLElement, complete: Function): void;
    getTransitionEndEvents(): string[];
    update(): void;
    isWithContent(tip: HTMLElement): boolean;
    addAttachmentClass(attachment: string): void;
    getTipElement(): HTMLElement;
    compileTemplate(html: unknown): HTMLElement | undefined;
    setContent(tip: HTMLElement): void;
    setElementContent(container: HTMLElement | null, content: HTMLElement | string): void;
    getTitle(): string;
    static getAttachment(placement: string): Placement;
    listen(): void;
    unListen(): void;
    handleEvent(e: BvEvent & Event): void;
    setRouteWatcher(on: boolean): void;
    setModalListener(on: boolean): void;
    setRootListener(on: boolean): void;
    doHide(id: string): void;
    doShow(id: string): void;
    doDisable(id: string): void;
    doEnable(id: string): void;
    setOnTouchStartListener(on: boolean): void;
    fixTitle(): void;
    enter(e: Event | null): void;
    leave(e: Event | null): void;
    getPopperConfig(placement: Placement, tip: HTMLElement | null): PopperOptions;
    getOffset(placement: Placement, tip: HTMLElement | null): number | string;
    getPlacement(): Placement;
    isWithActiveTrigger(): boolean;
    cleanTipClass(): void;
    handlePopperPlacementChange(data: Data): void;
    fixTransition(tip: HTMLElement): void;
}
export declare const VBToolTip: {
    bind(el: HTMLElement, bindings: DirectiveBinding, vnode: import("vue/types/vnode").VNode): void;
    inserted(el: HTMLElement, bindings: DirectiveBinding, vnode: import("vue/types/vnode").VNode): void;
    update(el: HTMLElement, bindings: DirectiveBinding, vnode: import("vue/types/vnode").VNode): void;
    componentUpdated(el: HTMLElement, bindings: DirectiveBinding, vnode: import("vue/types/vnode").VNode): void;
    unbind(el: HTMLElement): void;
};
export default VBToolTip;
